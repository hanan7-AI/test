import os
import numpy as np
from scipy.io import wavfile
from scipy.fftpack import fft
from sklearn.cluster import DBSCAN
import pandas as pd

# Step 1: Load all audio files from a folder
def load_audio_files(folder_path):
    files = [os.path.join(folder_path, f) for f in os.listdir(folder_path) if f.endswith('.wav')]
    return files

# Step 2: Compute FFT for an audio file (use only frequencies)
def compute_fft(file_path, n_bins=1024):
    samplerate, data = wavfile.read(file_path)
    data = data / np.max(np.abs(data))  # Normalize
    fft_result = fft(data)
    freqs = np.fft.fftfreq(len(fft_result), 1/samplerate)
    positive_freqs = freqs[freqs > 0]
    return positive_freqs[:n_bins]

# Step 3: Extract FFT features for all files (frequencies only)
def extract_features(files, n_bins=1024):
    feature_list = []
    for file in files:
        freqs = compute_fft(file, n_bins)
        feature_list.append([file] + list(freqs))
    return feature_list

# Step 4: Cluster features using DBSCAN
def cluster_with_dbscan(features, eps=10, min_samples=3):
    feature_matrix = np.array([f[1:] for f in features])  # Exclude file names
    dbscan = DBSCAN(eps=eps, min_samples=min_samples)
    labels = dbscan.fit_predict(feature_matrix)
    return labels

# Step 5: Save FFT features and labels to CSV
def save_to_csv(features, labels, output_path):
    file_names = [f[0] for f in features]
    feature_matrix = np.array([f[1:] for f in features])
    df = pd.DataFrame(feature_matrix, columns=[f"Freq_{i}" for i in range(feature_matrix.shape[1])])
    df.insert(0, "File", file_names)
    df["Cluster"] = labels
    df.to_csv(output_path, index=False)

# Example Usage
folder_path = "path_to_audio_folder"  # Replace with your folder path
output_csv = "fft_clustering_results.csv"

files = load_audio_files(folder_path)
features = extract_features(files, n_bins=1024)

# Perform DBSCAN clustering
labels = cluster_with_dbscan(features, eps=10, min_samples=3)

# Save results to CSV
save_to_csv(features, labels, output_csv)

print(f"Clustering results saved to {output_csv}")
