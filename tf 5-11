import numpy as np
from scipy.io import wavfile
import tensorflow.lite as tflite  # Importing tensorflow.lite directly

def load_audio(file_path, target_shape):
    # Load WAV file
    sample_rate, audio_data = wavfile.read(file_path)
    # Convert to float32 and adjust dimensions if needed
    audio_data = audio_data.astype(np.float32)

    # Adjust audio data to match the required model shape
    if audio_data.shape[0] > target_shape[1]:
        audio_data = audio_data[:target_shape[1]]
    elif audio_data.shape[0] < target_shape[1]:
        # Pad with zeros if the audio data is shorter than required
        padding = target_shape[1] - audio_data.shape[0]
        audio_data = np.pad(audio_data, (0, padding), 'constant')
    
    # Reshape data to match the model's expected input (e.g., 1 x samples x 1 for mono audio)
    return np.expand_dims(audio_data, axis=(0, -1))

def load_and_run_tflite_model(model_path, input_data):
    # Load TFLite model and allocate tensors
    interpreter = tflite.Interpreter(model_path=model_path)
    interpreter.allocate_tensors()

    # Get input and output details
    input_details = interpreter.get_input_details()
    output_details = interpreter.get_output_details()

    # Check input shape compatibility
    input_shape = input_details[0]['shape']
    if input_data.shape != tuple(input_shape):
        raise ValueError(f"Expected input shape {input_shape}, but got {input_data.shape}")

    # Set the input data
    interpreter.set_tensor(input_details[0]['index'], input_data)

    # Run inference
    interpreter.invoke()

    # Retrieve output data
    output_data = interpreter.get_tensor(output_details[0]['index'])
    return output_data

# Model and audio file paths
model_path = "path/to/your/model.tflite"
audio_file_path = "path/to/your/audio.wav"
input_shape = (1, 16000, 1)  # Adjust dimensions according to your model's requirements

# Load and prepare audio data
input_data = load_audio(audio_file_path, target_shape=input_shape)

# Run model and get result
output = load_and_run_tflite_model(model_path, input_data)
print("Model Output:", output)
