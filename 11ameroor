def load_audio_files(folder_path):
    files = [os.path.join(folder_path, f) for f in os.listdir(folder_path) if f.endswith('.wav')]
    return files


def compute_fft(folder_path, n_bins=1024):
    samplerate, data = wavfile.read(folder_path)
    data = data / np.max(np.abs(data))  # Normalize
    fft_result = fft(data)
    freqs = np.fft.fftfreq(len(fft_result), 1/samplerate)
    positive_freqs = freqs[freqs > 0]
    magnitude = np.abs(fft_result)
    return  magnitude

def extract_features(files, n_bins=1024):
    feature_list = []
    for file in files:
        magnitude = compute_fft(file, n_bins)
        feature_list.append(magnitude)
    return np.array(feature_list)

def cluster_with_kmeans(features, n_clusters):
    kmeans = KMeans(n_clusters=n_clusters, random_state=0)
    labels = kmeans.fit_predict(features)
    return labels


def plot_clusters(features, labels,n_clusters):
        plt.figure(figsize=(8, 6))
        unique_labels = np.unique(labels)
        colors = plt.cm.jet(np.linspace(0, 1, len(unique_labels))) # colormap
    
        for label, color in zip(unique_labels, colors):
            cluster_data = features[labels == label]
            for row in cluster_data:
                plt.plot(row, color=color, alpha=0.5)
            plt.plot(label, color=color, linewidth=2, label=f"Cluster {label}")  # Cluster center
    
        plt.xlabel("Frequency")
        plt.ylabel("Magnitude")
        plt.title("K-Means Clustering")
        plt.legend(bbox_to_anchor=(1.05,1),loc='upper left')
        plt.show()


folder_path = r'C:\Users\alqahth\Downloads\deep_clustring\location_2'
files = load_audio_files(folder_path)
n_clusters=2
features= extract_features(files)
labels= cluster_kmeans(features, n_clusters)
plot_clusters(features, labels, n_clusters)


---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
Cell In[104], line 6
      4 features= extract_features(files)
      5 labels= cluster_kmeans(features, n_clusters)
----> 6 plot_clusters(features, labels, n_clusters)

Cell In[103], line 3, in plot_clusters(features, labels, n_clusters)
      1 def plot_clusters(features, labels,n_clusters):
      2         plt.figure(figsize=(8, 6))
----> 3         unique_labels = np.unique(labels)
      4         colors = plt.cm.jet(np.linspace(0, 1, len(unique_labels))) # colormap
      6         for label, color in zip(unique_labels, colors):

File ~\AppData\Local\anaconda3\Lib\site-packages\numpy\lib\arraysetops.py:272, in unique(ar, return_index, return_inverse, return_counts, axis, equal_nan)
    138 @array_function_dispatch(_unique_dispatcher)
    139 def unique(ar, return_index=False, return_inverse=False,
    140            return_counts=False, axis=None, *, equal_nan=True):
    141     """
    142     Find the unique elements of an array.
    143 
   (...)
    270 
    271     """
--> 272     ar = np.asanyarray(ar)
    273     if axis is None:
    274         ret = _unique1d(ar, return_index, return_inverse, return_counts, 
    275                         equal_nan=equal_nan)

ValueError: setting an array element with a sequence. The requested array has an inhomogeneous shape after 1 dimensions. The detected shape was (2,) + inhomogeneous part.
<Figure size 800x600 with 0 Axes>
