import os
import numpy as np
from scipy.io import wavfile
from scipy.fftpack import fft
from sklearn.cluster import DBSCAN
import pandas as pd

# Step 1: Load audio files from a folder
def load_audio_files(folder_path):
    files = []
    for f in os.listdir(folder_path):  # Regular loop to go through files
        if f.endswith('.wav'):
            files.append(os.path.join(folder_path, f))
    return files

# Step 2: Compute FFT for a single file
def compute_fft(file_path, n_bins=1024):
    samplerate, data = wavfile.read(file_path)
    data = data / np.max(np.abs(data))  # Normalize
    fft_result = fft(data)
    freqs = np.fft.fftfreq(len(fft_result), 1 / samplerate)
    positive_freqs = []
    for i in range(len(freqs)):
        if freqs[i] > 0:  # Keep only positive frequencies
            positive_freqs.append(freqs[i])
    return positive_freqs[:n_bins]  # Limit to n_bins

# Step 3: Extract FFT features for all files using a regular loop
def extract_features(files, n_bins=1024):
    feature_list = []
    for file in files:  # Regular loop
        freqs = compute_fft(file, n_bins)
        feature_list.append([file] + freqs)  # Store file name and frequencies
    return feature_list

# Step 4: Perform DBSCAN clustering
def cluster_with_dbscan(features, eps=10, min_samples=3):
    feature_matrix = []
    for feature in features:  # Regular loop to extract feature matrix
        feature_matrix.append(feature[1:])  # Skip file name
    feature_matrix = np.array(feature_matrix)
    dbscan = DBSCAN(eps=eps, min_samples=min_samples)
    labels = dbscan.fit_predict(feature_matrix)
    return labels

# Step 5: Save features and clusters to CSV
def save_to_csv(features, labels, output_path):
    file_names = []
    feature_matrix = []
    for feature in features:  # Regular loop
        file_names.append(feature[0])  # First column is file name
        feature_matrix.append(feature[1:])  # Remaining columns are features
    df = pd.DataFrame(feature_matrix, columns=[f"Freq_{i}" for i in range(len(feature_matrix[0]))])
    df.insert(0, "File", file_names)
    df["Cluster"] = labels
    df.to_csv(output_path, index=False)

# Example Usage
folder_path = "path_to_audio_folder"  # Replace with your folder path
output_csv = "fft_clustering_results.csv"

# Load audio files
files = load_audio_files(folder_path)

# Extract FFT features using a regular loop
features = extract_features(files, n_bins=1024)

# Perform DBSCAN clustering
labels = cluster_with_dbscan(features, eps=10, min_samples=3)

# Save results to CSV
save_to_csv(features, labels, output_csv)

print(f"Clustering results saved to {output_csv}")
