import os
import numpy as np
from scipy.io import wavfile
from scipy.fftpack import fft
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt

# Load audio files
def load_audio_files(folder_path):
    files = [os.path.join(folder_path, f) for f in os.listdir(folder_path) if f.endswith('.wav')]
    return files

# Compute FFT
def compute_fft(file_path, target_length=1024):
    samplerate, data = wavfile.read(file_path)
    data = data / np.max(np.abs(data))  # Normalize
    fft_result = fft(data)
    magnitude = np.abs(fft_result)[:target_length]  # Use only the first `target_length` components
    if len(magnitude) < target_length:
        # Pad with zeros if the result is shorter than target_length
        magnitude = np.pad(magnitude, (0, target_length - len(magnitude)), mode='constant')
    return magnitude

# Extract features
def extract_features(files, target_length=1024):
    feature_list = []
    for file in files:
        magnitude = compute_fft(file, target_length)
        feature_list.append(magnitude)
    return np.array(feature_list)

# KMeans clustering
def cluster_with_kmeans(features, n_clusters):
    kmeans = KMeans(n_clusters=n_clusters, random_state=0)
    labels = kmeans.fit_predict(features)
    return labels

# Plot clusters
def plot_clusters(features, labels, n_clusters):
    plt.figure(figsize=(8, 6))
    unique_labels = np.unique(labels)
    colors = plt.cm.jet(np.linspace(0, 1, len(unique_labels)))

    for label, color in zip(unique_labels, colors):
        cluster_data = features[labels == label]
        for row in cluster_data:
            plt.plot(row, color=color, alpha=0.5)
        plt.plot(np.mean(cluster_data, axis=0), color=color, linewidth=2, label=f"Cluster {label}")  # Cluster center

    plt.xlabel("Frequency")
    plt.ylabel("Magnitude")
    plt.title(f"K-Means Clustering with {n_clusters} Clusters")
    plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')
    plt.show()

# Main workflow
folder_path = r'C:\Users\alqahth\Downloads\deep_clustring\location_2'
files = load_audio_files(folder_path)
n_clusters = 2
target_length = 1024

features = extract_features(files, target_length)
labels = cluster_with_kmeans(features, n_clusters)
plot_clusters(features, labels, n_clusters)
