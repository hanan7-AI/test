Here’s how you can modify the code to iterate over a range of n_clusters values (from 2 to 10) and generate a plot for each n_clusters value:

Updated Code with Iterative Plots for n_clusters

import os
import numpy as np
from scipy.io import wavfile
from scipy.fftpack import fft
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt


def load_audio_files(folder_path):
    files = [os.path.join(folder_path, f) for f in os.listdir(folder_path) if f.endswith('.wav')]
    return files


def compute_fft(file_path, n_bins=1024):
    samplerate, data = wavfile.read(file_path)
    data = data / np.max(np.abs(data))  # Normalize
    fft_result = fft(data)
    magnitude = np.abs(fft_result[:n_bins])  # Take absolute magnitude
    return magnitude


def extract_features(files, n_bins=1024):
    feature_list = []
    for file in files:
        magnitude = compute_fft(file, n_bins)
        feature_list.append(magnitude)
    return np.array(feature_list)


def cluster_with_kmeans(features, n_clusters):
    kmeans = KMeans(n_clusters=n_clusters, random_state=0)
    labels = kmeans.fit_predict(features)
    return labels, kmeans.cluster_centers_


def plot_kmeans(features, labels, centers, n_clusters):
    plt.figure(figsize=(8, 6))
    unique_labels = np.unique(labels)
    colors = plt.cm.jet(np.linspace(0, 1, len(unique_labels)))  # Generate a colormap

    for label, color in zip(unique_labels, colors):
        cluster_data = features[labels == label]
        for row in cluster_data:
            plt.plot(row, color=color, alpha=0.5)
        plt.plot(centers[label], color=color, linewidth=2, label=f"Cluster {label}")  # Cluster center

    plt.xlabel("Frequency Bin")
    plt.ylabel("Magnitude")
    plt.title(f"K-Means Clustering with {n_clusters} Clusters")
    plt.legend()
    plt.show()


# Main script
folder_path = r"C:\Users\alqahth\OneDrive - Air Products and Chemicals, Inc\Desktop\deep_clustring\location_2"
files = load_audio_files(folder_path)
features = extract_features(files, n_bins=1024)

# Generate plots for n_clusters from 2 to 10
for n_clusters in range(2, 11):
    labels, centers = cluster_with_kmeans(features, n_clusters)
    plot_kmeans(features, labels, centers, n_clusters)

Key Updates:

	1.	Iteration Over n_clusters:
	•	Added a loop: for n_clusters in range(2, 11), which iterates through cluster values from 2 to 10.
	2.	Dynamic Plot Titles:
	•	Each plot is dynamically labeled with the current n_clusters value: K-Means Clustering with {n_clusters} Clusters.
	3.	One Plot per Cluster Count:
	•	A separate plot is displayed for each n_clusters value.

What Happens:

	•	The program will generate 9 separate plots (for n_clusters = 2, 3, …, 10).
	•	Each plot will visualize the clusters, where every cluster has a unique color.

Let me know if you’d like further customization!
